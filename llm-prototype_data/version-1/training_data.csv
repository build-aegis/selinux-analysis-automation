policy_description,violation_type,explanation
"payment_proc_t has read and write permissions to /financial/payments which is a sensitive financial resource",separation_of_duty,"This violates separation of duty because payment processing systems should separate the ability to create payments (write) from the ability to view them (read) to prevent fraud. Different roles should handle these permissions."
"payment_proc_t has read and write permissions to /var/lib/payments which is a sensitive payment resource",separation_of_duty,"This violates separation of duty because payment processors should have write operations managed by one role and read operations by another to ensure verification. One entity should not be able to both create and inspect payment data."
"security_t has both read and write permissions to /var/log/secure which contains sensitive security logs",separation_of_duty,"This violates separation of duty because security log files should be append-only or write-only for the logging systems, while read access should be limited to separate auditing processes. This prevents log tampering to hide malicious activity."
"customer_data_t has both read and write permissions to /customer/data which contains sensitive customer information",separation_of_duty,"This violates separation of duty because customer data management should separate the roles that can modify customer information from those that can access it. This prevents unauthorized modifications and protects sensitive customer PII."
"finance_app_t has read and write access to both /financial/ledger (financial data) and /financial/auditing (audit data)",separation_of_duty,"This violates separation of duty because financial applications should not have control over both transaction data and the audit trails that verify those transactions. The same process should not be able to modify financial records and also modify the audit logs that would detect such modifications."
"finance_app_t has write access to /financial/transactions and read access to /customer/data",no_violation,"This does not violate separation of duty because the finance application legitimately needs to read customer data to process transactions, while only having write permissions to the transaction system itself. The permissions are appropriately scoped."
"audit_t has read access to /var/log/audit and append access to /financial/auditing",no_violation,"This does not violate separation of duty because the audit process only has read access to system audit logs and append access to financial audit logs. It cannot modify existing audit records in either location, maintaining the integrity of the audit trail."
"backup_t has read access to /var/www/html and /var/lib/postgresql",no_violation,"This does not violate separation of duty because backup processes legitimately need read access to many different system resources to create backups. This system is properly limited to read-only access without modification abilities."
"sysadm_t has read access to /etc/passwd, /etc/shadow, /var/log/audit, and /var/log/secure",no_violation,"This does not violate separation of duty because system administrators need read access to these resources for troubleshooting. The policy correctly limits to read-only access without write permissions to sensitive authentication files or log files."
"httpd_t has read access to /var/www/html and read-write access to /var/log/httpd",no_violation,"This does not violate separation of duty because web servers legitimately need to read web content and write to their own logs. The permissions follow the principle of least privilege with appropriate separation of content and logging."
"finance_app_t has write access to financial data and audit_t has read access to audit logs",no_violation,"This is a proper implementation of separation of duty, where the financial application can modify financial data but a separate audit process is responsible for reviewing the audit logs, creating appropriate segregation of duties."
"payment_proc_t has write-only access to payment transactions and security_t has read-only access to security logs",no_violation,"This would be a proper implementation of separation of duty where payment processing can only create transactions but not read them back, while security monitoring can only read logs but not modify them."